// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDDTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Takhsis")]
    public partial class TakhsisFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Takhsis.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Takhsis", "          Takhsis Scenarios for Sadad portal ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Takhsis Pos")]
        [NUnit.Framework.CategoryAttribute("TakhsisPos")]
        [NUnit.Framework.TestCaseAttribute("000000130476612", "MC0000000048637", null)]
        public void TakhsisPos(string merchantNo, string contractNo, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TakhsisPos"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("MerchantNo", merchantNo);
            argumentsOfScenario.Add("ContractNo", contractNo);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Takhsis Pos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
     testRunner.Given("The user logins successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
  testRunner.And(string.Format("The user searches for the Merchant request based on {0} and {1}", merchantNo, contractNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
     testRunner.When("The user performs Takhsis operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "TermModel",
                            "InstallLocNameEN",
                            "PostalCode",
                            "ParentShaparakMccCode",
                            "ShaparakMcc",
                            "ExistanceStatusCode",
                            "TerminalIBAN",
                            "MultiPlexingValuBehaviourId"});
                table22.AddRow(new string[] {
                            "BlueBird_CT360",
                            "TestStore",
                            "1541697152",
                            "دامپزشکی",
                            "خدمات دامپزشکی",
                            "عادي 111",
                            "IR820550021380004819974001",
                            "مقدار جاری"});
#line 11
  testRunner.And("The user fills terminal request informations as following:", ((string)(null)), table22, "And ");
#line hidden
#line 17
     testRunner.And("The user sumbits for TAKHSIS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
  testRunner.Then("Terminal request should be assigned to a serialNo successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TakhsisIPG")]
        [NUnit.Framework.CategoryAttribute("TakhsisIPG")]
        [NUnit.Framework.TestCaseAttribute("M00000000000295", "MC0000000000301", null)]
        public void TakhsisIPG(string merchantNo, string contractNo, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "TakhsisIPG"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("MerchantNo", merchantNo);
            argumentsOfScenario.Add("ContractNo", contractNo);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TakhsisIPG", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
     testRunner.Given("The user logins successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
  testRunner.And(string.Format("The user searches for the Merchant request based on {0} and {1}", merchantNo, contractNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
     testRunner.When("The user performs Takhsis operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "TermType",
                            "InstallLocNameEN",
                            "PostalCode",
                            "InstallLoc_MobileNo",
                            "IBAN"});
                table23.AddRow(new string[] {
                            "پایانه اینترنتی",
                            "TestStore",
                            "1541697152",
                            "9121167545",
                            "IR030170000000307413960008"});
#line 33
  testRunner.And("The user fills IPG Assign informations as following:", ((string)(null)), table23, "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "StoreUrl",
                            "Organization",
                            "StoreIp",
                            "StorePort",
                            "StoreEmail",
                            "EnamadStartDate",
                            "EnamadEndDate",
                            "RemainReversal",
                            "ReverseTimeOut"});
                table24.AddRow(new string[] {
                            "https://www.testStore.com",
                            "اپراتورهای تلفن همراه",
                            "192.168.5.5",
                            "2020",
                            "https://testBDD.com",
                            "1398/01/01",
                            "1402/01/01",
                            "30 دقیقه",
                            "25 دقیقه"});
#line 38
  testRunner.And("The user fills IPG Specific information as following:", ((string)(null)), table24, "And ");
#line hidden
#line 43
     testRunner.And("The user sumbits for TAKHSIS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
     testRunner.Then("Terminal request should be assigned to a serialNo successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("RejectRequest")]
        [NUnit.Framework.CategoryAttribute("RejectRequest")]
        [NUnit.Framework.TestCaseAttribute("M00000000000295", "MC0000000000301", null)]
        public void RejectRequest(string merchantNo, string contractNo, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RejectRequest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("MerchantNo", merchantNo);
            argumentsOfScenario.Add("ContractNo", contractNo);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RejectRequest", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
     testRunner.Given("The user logins successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
  testRunner.And(string.Format("The user searches for the Merchant request based on {0} and {1}", merchantNo, contractNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
     testRunner.When("The user rejects the TAKHSIS request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
  testRunner.Then("The reject operation should be done successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
