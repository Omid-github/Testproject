// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDDTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Contract")]
    public partial class ContractFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Contract.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Contract", "         Contract Scenarios for Sadad portal ", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CreateContract")]
        [NUnit.Framework.CategoryAttribute("CreateContract")]
        public void CreateContract()
        {
            string[] tagsOfScenario = new string[] {
                    "CreateContract"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CreateContract", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("The user logins successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.And("Navigates to the CreateMerchantContract Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "CardAcqid",
                            "Agency",
                            "StoreNameFA",
                            "Branch",
                            "RequestedTermsCount",
                            "Termtype",
                            "RowNo",
                            "IBAN",
                            "AccountNo",
                            "PartialBank",
                            "PartialBankZone",
                            "IBANStatusCode"});
                table1.AddRow(new string[] {
                            "000000140337788",
                            "اصفهان",
                            "تست سداد",
                            "سیدخندان",
                            "1",
                            "پایانه فروشگاهی",
                            "1",
                            "IR810170000000227545995008",
                            "0227545995008",
                            "ملی",
                            "اداره امور تست سداد",
                            "درخواست حساب فعال"});
#line 10
 testRunner.When("The user fills out Contract information as following :", ((string)(null)), table1, "When ");
#line hidden
#line 15
 testRunner.And("The user submits", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.Then("The contract should be created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("EditContract")]
        [NUnit.Framework.CategoryAttribute("EditContract")]
        [NUnit.Framework.TestCaseAttribute("000000130880868", "MC0000001839571", null)]
        public void EditContract(string merchantNo, string contractNo, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "EditContract"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("MerchantNo", merchantNo);
            argumentsOfScenario.Add("ContractNo", contractNo);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EditContract", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
   testRunner.Given("The user logins successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
   testRunner.And("Navigates to the MerchantContract Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
   testRunner.And(string.Format("The user searches for a contract based on MerchantNo {0} and ContractNo {1}", merchantNo, contractNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "CardAcqid",
                            "Agency",
                            "StoreNameFA",
                            "StoreNameEN",
                            "Branch",
                            "RequestedTermsCount",
                            "Termtype",
                            "RowNo",
                            "IBAN",
                            "AccountNo",
                            "AccountTitle",
                            "PartialBank",
                            "PartialBankZone",
                            "IBANStatusCode"});
                table2.AddRow(new string[] {
                            "000000140337788",
                            "اصفهان",
                            "تست سداد",
                            "شریعتی",
                            "سیدخندان",
                            "1",
                            "پایانه فروشگاهی",
                            "3",
                            "IR810170000000227545995008",
                            "0227545995008",
                            "حساب فرعی",
                            "ملی",
                            "اداره امور تست سداد",
                            "درخواست حساب فعال"});
#line 28
   testRunner.When("The user Edits Contract information as following:", ((string)(null)), table2, "When ");
#line hidden
#line 33
   testRunner.And("The user submits", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
   testRunner.Then("The contract should be modified successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CloneContract")]
        [NUnit.Framework.CategoryAttribute("CloneContract")]
        [NUnit.Framework.TestCaseAttribute("000000130880868", "MC0000001839571", "000000140199645", null)]
        public void CloneContract(string merchantNo, string contractNo, string cardAcqId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CloneContract"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("MerchantNo", merchantNo);
            argumentsOfScenario.Add("ContractNo", contractNo);
            argumentsOfScenario.Add("CardAcqId", cardAcqId);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CloneContract", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
   testRunner.Given("The user logins successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
   testRunner.And("Navigates to the MerchantTerminal Form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
   testRunner.And(string.Format("The user searches for a contract based on MerchantNo {0} and ContractNo {1}", merchantNo, contractNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
   testRunner.When(string.Format("The user clones a contract for the specified Merchant {0}", cardAcqId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
   testRunner.And("The user submits", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
   testRunner.Then("The contract should be cloned successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
